[{"/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/reportWebVitals.js":"1","/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/App.js":"2","/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/components/Dropdowns.js":"3","/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/utils/functions/index.js":"4","/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/index.js":"5","/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/components/SongList.js":"6","/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/components/SongSearch.js":"7","/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/components/Header.js":"8","/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/utils/useDarkMode.js":"9","/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/utils/useLocalStorage.js":"10","/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/components/SongRow.js":"11"},{"size":362,"mtime":1610577374461,"results":"12","hashOfConfig":"13"},{"size":5923,"mtime":1612539761058,"results":"14","hashOfConfig":"13"},{"size":2880,"mtime":1612532765652,"results":"15","hashOfConfig":"13"},{"size":675,"mtime":1610733896054,"results":"16","hashOfConfig":"13"},{"size":506,"mtime":1610578133468,"results":"17","hashOfConfig":"13"},{"size":3615,"mtime":1612483426430,"results":"18","hashOfConfig":"13"},{"size":856,"mtime":1612373504875,"results":"19","hashOfConfig":"13"},{"size":462,"mtime":1612391858584,"results":"20","hashOfConfig":"13"},{"size":418,"mtime":1612391724867,"results":"21","hashOfConfig":"13"},{"size":404,"mtime":1612391758770,"results":"22","hashOfConfig":"13"},{"size":447,"mtime":1612483980101,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1n2ur3t",{"filePath":"26","messages":"27","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"31"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/reportWebVitals.js",[],"/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/App.js",["54","55","56","57","58","59"],"\nimport React, {useState, useEffect} from \"react\"\nimport moment from \"moment\"\nimport axios from \"axios\"\n// import {getChart} from \"billboard-top-100\"\nimport Dropdowns from \"./components/Dropdowns\"\nimport SongList from \"./components/SongList\"\nimport SongSearch from \"./components/SongSearch\"\nimport Header from \"./components/Header\"\nimport { useDarkMode } from \"./utils/useDarkMode\"\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useLocalStorage } from \"./utils/useLocalStorage\";\nimport Button from \"@material-ui/core/Button\"\n\nimport queryString from 'query-string'\n\n\nfunction App() {\n  const parsed = queryString.parse(window.location.search)\n  const [accessToken, setAccessToken] = useLocalStorage('access_token', parsed.access_token)\n  const [spotifyConnect, setSpotifyConnect] = useState(false)\n  const [darkMode, setDarkMode] = useDarkMode();\n  const [isFetching, setIsFetching] = useState(true)\n  const paletteType = darkMode ? \"dark\" : \"light\";\n  const darkTheme = createMuiTheme({\n    palette: {\n      type: paletteType,\n    }\n  });\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n\n  const [date, setDate] = useLocalStorage('date', {\n    year: moment().format(\"YYYY\"),\n    month: moment().format('MM'),\n    day: moment().format('DD')\n  })\n  const [chart, setChart] = useState(null)\n  const [filter, setFilter] = useLocalStorage('filter', \"\")\n  const [userId, setUserId] = useState(\"\")\n  const [playlistId, setPlaylistId] = useState(\"\")\n  const [notFoundList, setNotFoundList] = useState([])\n  const dateFormatted = `${date.year}-${date.month}-${date.day}`\n\n  const handleSpotifyConnect = async () => {\n    window.open(`${process.env.REACT_APP_BILLBOARD_API_BASE_URL}/auth-spotify`, '_self');\n  }\n\n  const handleCreatePlaylist = async () => {\n    try {\n      const newPlaylist = await axios({\n        url: `https://api.spotify.com/v1/users/${userId}/playlists`,\n        method: 'POST',\n        headers: {\n          'Authorization': \"Bearer \" + accessToken,\n          'Content-Type': 'application/json'\n        },\n        data: {\n          name: `Hot 100 from ${dateFormatted}`,\n          public: true,\n          description: 'created using Do-Re-Minisce (doreminisce.kylerichardson.tech)'\n        }\n      })\n      const playlistId = newPlaylist.data.id\n      const tracksToAdd = await findTracksOnSpotify()\n      const tracksToAddFilteredNotFound = tracksToAdd.filter(track=> !track.includes(\"NOTFOUND\"))\n      // console.log(JSON.stringify(tracksToAdd))\n      const addedTracks = await axios({\n          url: `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\n          method: 'POST',\n          headers: {\n            'Authorization': \"Bearer \" + accessToken,\n            'Content-Type': 'application/json'\n          },\n          data: {\n            \"uris\": tracksToAddFilteredNotFound\n          }\n      })\n      console.log(newPlaylist.data.external_urls.spotify)\n    \n    } catch(err) {\n      console.log(err)\n    }\n  }\n\n  const findTracksOnSpotify = async () => {\n    try {\n      const trackList = Promise.all(chart.songs.map(async song=> {\n        let songId=\"NOTFOUND\"\n        try {\n          const result = await axios({\n          url: 'https://api.spotify.com/v1/search',\n          method: 'GET',\n          headers: {\n            'Authorization': \"Bearer \" + accessToken,\n            'Content-Type': 'application/json'\n          },\n          params: {\n            q: `${song.title} ${song.artist.split(\" \")[0]}`,\n            type: \"track\",\n            limit: 1\n          }\n        })\n        if (result.data.tracks.items)\n          songId = result.data.tracks.items[0].id\n        } catch(err ) {\n          // console.log(err)\n          setNotFoundList(prev => [...prev, song])\n        }\n        return `spotify:track:${songId}`\n      }))\n      return trackList\n    } catch (err) {\n      // console.log(err)\n    }\n  }\n\n  useEffect(()=> {\n    if (accessToken) {\n      if (parsed) {\n        // setAccessToken(parsed.access_token)\n        // window.open(`${process.env.REACT_APP_URL || 'http://localhost:3000'}`, '_self')\n      }\n      setSpotifyConnect(true)\n      axios.get(\"https://api.spotify.com/v1/me\", {\n        headers: {\n          \"Authorization\": \"Bearer \" + accessToken\n        }\n      })\n      .then(res=> {\n        // console.log(res.data)\n        setUserId(res.data.id)\n      })\n      .catch(err => {\n        console.log(err)\n      })\n    }\n  }, [accessToken])\n\n  \n  useEffect(()=> {\n    \n    async function fetchChart() {\n      setIsFetching(true)\n      await axios.get(`${process.env.REACT_APP_BILLBOARD_API_BASE_URL}/chart/${dateFormatted}`)\n      .then(res=> {\n        setChart(res.data)\n      })\n      .catch(err => {console.log(err)})\n      setIsFetching(false)\n    }\n    fetchChart()\n    \n  },[date, dateFormatted])\n  \n  \n  return (\n    <ThemeProvider theme={darkTheme}>\n      <div className=\"App\">\n        <Header toggleDarkMode={toggleDarkMode}/>\n        <Dropdowns date = {date} setDate = {setDate}/>\n        <SongSearch filter={filter} setFilter = {setFilter}/>\n        <h3>\n          Top songs for week of {dateFormatted}\n        </h3>\n        \n        {chart && !isFetching ? (\n        <>\n          {!spotifyConnect ? \n          <div style={{marginBottom: \"10px\"}}>\n            <p>To create a playlist, connect to spotify below:</p>\n            <Button variant=\"contained\" onClick={handleSpotifyConnect}>Connect to Spotify</Button>\n          </div> : \n          <div style={{marginBottom: \"10px\"}}>\n            <p>Successfully connected to Spotify</p>\n            <Button variant=\"contained\" onClick={handleCreatePlaylist}>Create a Playlist</Button>\n          </div>}\n          <SongList filter={filter} chart = {chart}/>\n        </>) \n        : <div><CircularProgress/></div>\n        }\n      </div>\n    </ThemeProvider>\n    \n  );\n}\n\nexport default App;\n","/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/components/Dropdowns.js",[],["60","61"],"/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/utils/functions/index.js",[],["62","63"],"/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/index.js",[],"/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/components/SongList.js",["64"],"import React, {useState, useEffect} from \"react\"\nimport SongRow from \"./SongRow\"\nimport CircularProgress from '@material-ui/core/CircularProgress';\n// import axios from \"axios\"\n\nconst SongList = ({filter, chart})=> {\n    const [videoList, setVideoList] = useState([])\n    // const [songIDs, setSongIDs] = useState([])\n    // const maxOnPage = 25\n    const [isLoading, setIsLoading] = useState(true)\n    const [filteredChart, setFilteredChart] = useState(chart)\n    // const makePlaylist = async () => {\n    //     try {\n    //         for (let song in chart.songs) {\n    //             const res = await axios.get(`${process.env.REACT_APP_YOUTUBE_API_BASE_URL}?part=snippet&filters=0&q=${song.title},${song.artist}&type=video&videoEmbeddable=true&maxResults=1&key=${process.env.REACT_APP_API_KEY}`)\n    //             setSongIDs(prev => [...prev, res.data.items[0].id.videoId])\n    //         }\n    //     }\n    //     catch (error) {\n    //         console.log(error)\n    //     }\n    //     window.open(`http://www.youtube.com/watch_videos?video_ids=${songIDs.join()}`)\n    // }\n    // useEffect(()=> {\n    //     setIsLoading(true)\n    //     for (let x=0;x<=maxOnPage;x++){\n    //         axios.get(`${process.env.REACT_APP_YOUTUBE_API_BASE_URL}?part=snippet&filters=0&q=${chart.songs[x].title},${chart.songs[x].artist}&type=video&videoEmbeddable=true&maxResults=1&key=${process.env.REACT_APP_API_KEY}`)\n    //         .then(res => {\n    //             console.log(res.data)\n    //             setVideoList(prev => [...prev,res.data.items[0].id.videoId])\n    //         })\n    //         .catch(err=> {\n    //             console.log(err)\n    //             setIsLoading(false)\n    //         })\n    //     }\n    //     setIsLoading(false)\n    // },[chart])\n\n    useEffect(()=> {\n        setIsLoading(true)\n        if (chart) {\n            const newChart = chart[\"songs\"].filter(ele=> \n                ele.title.toLowerCase().includes(filter.toLowerCase()) || \n                ele.artist.toLowerCase().includes(filter.toLowerCase()))\n            setFilteredChart(newChart)\n        }\n        setIsLoading(false)\n    },[filter, chart])\n    \n    return isLoading ? <div style={{textAlign: \"center\"}}><CircularProgress/></div> : (\n\n        <>\n        {/* <div>\n            <button onClick={makePlaylist}>Create Youtube Playlist</button>\n        </div> */}\n        <div className={videoList.length > 0 ? \"list-container\" : \"list-container-fallback\"}>\n            {/* following code is for embed youtube video, which quickly hits free use youtube api limits.  For now, just using search queries, which is free */}\n            {/* {chart[\"songs\"].map((song, ind) => {\n                return videoList[ind] ? (\n                    ind <=maxOnPage && (\n                        <div key={song.title}>\n                            <iframe title={song.title} class=\"ytplayer\" type=\"text/html\" width=\"250\" height=\"250\"\n                                src={`https://www.youtube.com/embed/${videoList[ind]}?autoplay=0`}\n                                frameBorder=\"0\"></iframe>\n                            <a href={`https://www.youtube.com/watch?v=${videoList[ind]}`}>{`${ind+1}. ${song.title}`}</a>\n                        </div>\n                    )\n                ) :  <a href={`https://www.youtube.com/results?search_query=${song.title} ${song.artist}`}>{`${ind+1}. ${song.title} - ${song.artist}`}</a>\n            }) \n            }*/}\n            {filteredChart.map((song, ind) => (\n                <SongRow key = {ind} song={song}/>\n            ))}\n        </div>\n        </>\n        \n    )\n}\n\nexport default SongList;\n",["65","66"],"/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/components/SongSearch.js",["67"],"import React, {useState, useEffect} from \"react\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Button from \"@material-ui/core/Button\"\n\nconst SongSearch = ({filter, setFilter})=> {\n  const handleChange = (event) => {\n    event.preventDefault()\n    const {value} = event.target\n    setFilter(value)\n  }\n  const handleClear = (event) => {\n    event.preventDefault()\n    setFilter(\"\")\n  }\n\n  useEffect(()=> {\n  },[])\n\n    return (\n        <div style={{display: \"flex\", justifyContent: \"center\", marginTop: \"15px\"}}>\n          {/* <p>Search List:</p> */}\n            <TextField \n              value={filter}\n              label=\"Search List\"\n              variant=\"outlined\"\n              onChange={handleChange}\n            />\n            <Button color=\"primary\" onClick={handleClear}>x</Button>\n        </div>\n    )\n}\n\nexport default SongSearch;\n","/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/components/Header.js",["68"],"import React, {useState, useEffect} from \"react\"\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\n\nconst Header = ({toggleDarkMode})=> {\n\n  useEffect(()=> {\n  },[])\n\n    return (\n        <div>\n            <h1>Do-Re-Minisce</h1>\n            <div style={{ position: \"absolute\", top: \"4%\", right: \"5%\", cursor: \"pointer\" }} onClick={toggleDarkMode}>\n                <Brightness4Icon />\n            </div>\n        </div>\n    )\n}\n\nexport default Header;\n","/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/utils/useDarkMode.js",[],"/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/utils/useLocalStorage.js",[],["69","70"],"/Users/kylerichardson/Documents/GitHub/personal-projects/doreminisce/src/components/SongRow.js",[],{"ruleId":"71","severity":1,"message":"72","line":21,"column":23,"nodeType":"73","messageId":"74","endLine":21,"endColumn":37},{"ruleId":"71","severity":1,"message":"75","line":43,"column":10,"nodeType":"73","messageId":"74","endLine":43,"endColumn":20},{"ruleId":"71","severity":1,"message":"76","line":43,"column":22,"nodeType":"73","messageId":"74","endLine":43,"endColumn":35},{"ruleId":"71","severity":1,"message":"77","line":44,"column":10,"nodeType":"73","messageId":"74","endLine":44,"endColumn":22},{"ruleId":"71","severity":1,"message":"78","line":70,"column":13,"nodeType":"73","messageId":"74","endLine":70,"endColumn":24},{"ruleId":"79","severity":1,"message":"80","line":140,"column":6,"nodeType":"81","endLine":140,"endColumn":19,"suggestions":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"83","replacedBy":"87"},{"ruleId":"85","replacedBy":"88"},{"ruleId":"71","severity":1,"message":"89","line":7,"column":23,"nodeType":"73","messageId":"74","endLine":7,"endColumn":35},{"ruleId":"83","replacedBy":"90"},{"ruleId":"85","replacedBy":"91"},{"ruleId":"71","severity":1,"message":"92","line":1,"column":16,"nodeType":"73","messageId":"74","endLine":1,"endColumn":24},{"ruleId":"71","severity":1,"message":"92","line":1,"column":16,"nodeType":"73","messageId":"74","endLine":1,"endColumn":24},{"ruleId":"83","replacedBy":"93"},{"ruleId":"85","replacedBy":"94"},"no-unused-vars","'setAccessToken' is assigned a value but never used.","Identifier","unusedVar","'playlistId' is assigned a value but never used.","'setPlaylistId' is assigned a value but never used.","'notFoundList' is assigned a value but never used.","'addedTracks' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'parsed'. Either include it or remove the dependency array.","ArrayExpression",["95"],"no-native-reassign",["96"],"no-negated-in-lhs",["97"],["96"],["97"],"'setVideoList' is assigned a value but never used.",["96"],["97"],"'useState' is defined but never used.",["96"],["97"],{"desc":"98","fix":"99"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [accessToken, parsed]",{"range":"100","text":"101"},[4502,4515],"[accessToken, parsed]"]